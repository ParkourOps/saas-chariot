<script setup lang="ts">
    import { ref } from 'vue';
    import { useCart } from '@/state/cart';
    import { useBilling } from '@/libraries/use-billing';
    import getRouteUrl from '@/utilities/get-route-url';
    import Drawer from '@/components/layouts/Drawer.vue';
    import Card from '@/components/layouts/Card.vue';
    import Numberbox from '@/components/inputs/Numberbox.vue';

    const cart = useCart();
    const billing = useBilling();

    const show = ref(false);
    defineExpose({
        show() { show.value = true },
        hide() { show.value = false },
        toggle() { show.value != show.value }
    });

    async function checkout() {
        const response = await billing.getCheckoutUrl({
            cart: cart.cart.map((item)=>({
                priceId: item.price.id,
                quantity: item.quantity
            })),
            successUrl: getRouteUrl({name: "user-dashboard"})
        });
        window.open(response.checkoutUrl, "_self")
    }
</script>

<template>
    <Drawer v-model="show" :width="`300px`" position="right">
        <div class="p-6 text-center opacity-50 font-semibold">
            Cart
        </div>
        <div class="p-4 flex flex-col gap-4">
            <p v-if="cart.cart.length < 1" class="text-center text-sm">No items in cart.</p>
            <Card shadow="md" body-classes="p-3" v-for="item of cart.cart" :key="item.product.id">
                <p class="font-semibold text-sm mb-2">{{ item.product.name }}</p>

                <div class="flex gap-2 items-center">
                    <Numberbox full-width size="sm" :min="1" :modelValue="item.quantity" @update:modelValue="(val)=>{ if (val && val > 0) { item.quantity = val; } }"/>
                    <div class="w-full">
                        Ã— {{ item.price.unitPrice/100 }}
                    </div>
                </div>
                <div class="divider my-0" />
                <div class="flex gap-2 justify-end items-center">
                    <span>{{ item.quantity * item.price.unitPrice/100 }}</span>
                    <button class="btn btn-sm btn-primary" @click="cart.removeFromCart(item)">Remove</button>
                </div>
            </Card>
        </div>

        <div class="p-4 absolute bottom-0 w-full">
            <button class="btn btn-primary w-full" @click="checkout" :disabled="cart.cart.length < 1">Checkout</button>
        </div>
        
        
    </Drawer>
</template>